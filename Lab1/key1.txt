Sheldon Dong

Exercise 1.1: Moving around in Emacs
1. 
2. C-s P U B L I C C-s
3. HOME 
   C-s L a b o r 
4. HOME 
   C-s s e l f - r e f
5. HOME 
   C-s a r r o w
6. HOME 
   C-e
7. C-a
8. Used commands, no arrow keys
9. Did not use arrow keys
10. C-x C-c


Exercise 1.2: Deleting text in Emacs
1.
2. M-g M-g 18 
   C-k
3. C-s < ! 
   HOME 
   C-k
4. C-s < ! 
   HOME
   C-k C-k C-k C-k
5. C-s < !
   C-b C-b
   M-z >
   
   C-S < !
   HOME
   C-k
   C-x C-s
   C-x C-c


Exercise 1.3: Inserting text in Emacs
1.
2. C-s A s s i g n m e n t SP 1
   M-% A s s i g n m e n t SP 37 
   ENTER 
   y y
3. C-s U T F - 8
   M-% U S - A S C I I 
   ENTER
   y
4. C-s < / o l >
   C-p
   C-e
   C-o
5. C-x C-s
   C-x C-c


Exercise 1.4: Other editing tasks in Emacs
1. c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP
   > SP e x e r 4 . h t m l
2. e m a c s SP e x e r 4 . h t m l
3. M-> C-r < ! C-SP C-e M-w
   M-g g 3 5 5 ENTER C-y
4. M-> C-r < ! C-r C-SP C-n C-n C-e M-w
   M-g g 3 0 3 ENTER C-y
   M-> C-r - < p C-f C-SP C-e M-w
   M-g g 3 4 0 C-y C-k

   M-> C-r < ! C-r C-r C-r C-SP C-e M-w
   M-g g 9 3 ENTER C-y
    
   M-> C-r < ! C-r C-r C-r C-r C-SP C-n C-e M-w
   M-g g 1 8 ENTER C-y
5. M-> C-r - - - C-r C-SP M-> C-w
6. C-x-u
7. C-r - - - SP e x C-a C-SP M-> M-x comment-region
8. M-< M-% < o l > ENTER < O l > ENTER !
   (7 occurences)
9. C-x C-s C-x C-c
   d i f f SP - u SP e x e r 1 . h t m l SP e x e r 4 . h t m l SP
   > SP e x e r 4 . d i f f



Exercise 1.5: Doing commands in Emacs
1. M-x make-directory ENTER
   j u n k ENTER
2. C-x C-f j u n k / h e l l o . c ENTER
   (COPY AND PASTE CODE FROM WEBSITE)
3. M-x compile ENTER
   Backspace Backspace Backspace Backspace 
   Backspace Backspace Backspace Backspace (to delete the default make -k)
   g c c SP - o SP h e l l o SP h e l l o . c
   ENTER
4. M-x c o m p i l e ENTER
   DOWN 
   . / h e l l o ENTER
   C-x 0 
   C-x C-w h e l l o - o u t ENTER

-*- mode: compilation; default-directory: "~/cs35l/assignment1/junk/" -*-
Compilation started at Tue Oct  3 16:32:56

./hello
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  
  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c'\
;%c  char const *p = %c%s%c;%c  
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  %c  return 0;%c}%\
c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Compilation finished at Tue Oct  3 16:32:56

Exercise 1.6: Running Elisp Code
1. C-x b
2. ( r a n d o m ) C-j
3. ( s e t q SP x SP ( r a n d o m ) ) C-j
   ( s e t q SP y SP ( r a n d o m ) ) C-j
4. ( * SP x SP y ) C-j
   (For x and y, I got -1201249614010048352 and 1451513068219756993.
   However, the answer is 1283533499516205216, which is wrong.
   The answer should be negative. This indicates that there was overflow)
5. M-: ( * SP x SP y) ENTER
   (Using this, we see that the output is exactly the same,
    but there are two hexadecimal values in parenthesis:
   1283533499516205216 (#o107200156532776434240, #x11d006ead7fa38a0)
6. No, the two random integers aren't truly random in the mathematical sense.
   Emacs uses an algorithm to generate a pseudo-random value.
   This is generated in a deterministic fashion using a seed that is chosen 
   within a finite range. 
7. If we assume (random) is truly random, then there is an infinite range 
   of values the computer can choose from, contrary to the usual limit
   between "most-negative-fixnum" and "most-positive-fixum." Since the
   randomly selected number can be infinitely small or large, there is a 
   high chance for overflow in the product. Since there is an infinte amount 
   of values, but only a certain number of bits the computer can hold, the 
   probability that it won't overflow is basically 0. So the probaiblity 
   that the solution will be correct is 0 because of the high chance 
   of overflow, which changes the solution
   
