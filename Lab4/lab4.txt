Sheldon Dong
004784870

1.  I first downloaded the tar file using wget:
    wget http://web.cs.ucla.edu/classes/fall17/cs35L/assign/
    coreutils-with-bug.tar.gz

2.  I then unzipped the tar file to the current directory using:
    tar -xvzf coreutils-with-bug.tar.gz

3.  I then cd'ed into the created directory:
    cd coreutils-with-bug

4.  I then configured and made the program using:
    ./configure
    make

    However, after running the make command, we run into an error:
    In file included from utimecmp.c:41:0:
    utimens.h:2:5: error: conflicting types for 'futimens'
     int futimens (int, char const *, struct timespec const [2]);
     	 ^
    In file included from utimecmp.h:25:0,
                 from utimecmp.c:25:
    /usr/include/sys/stat.h:373:12: note: previous declaration of 'futimens' was here
    extern int futimens (int __fd, const struct timespec __times[2]) __THROW;

    This indicates that the function "futimens" was declared and defined more
    than once, so we are given an error message

5.  I then downloaded the patch file using wget:
    wget http://web.cs.ucla.edu/classes/fall17/cs35L/assign/coreutils.diff
   
    This downloaded the diff file into a file called coreutils.diff

6.  I then patched the coreutils-with-bug file using the patch command:
    patch -p0 < coreutils.diff

    Applying this command outputs:
    patching file lib/utimens.c
    patching file lib/utimens.h
    patching file src/copy.c
    patching file src/tee.c
    patching file src/touch.c

    This applies the patch to the different files of the program and fixes the
    problem with multiple declarations of futimens.

7.  Now we run make again, and there is no error message output, indicating 
    that our patch fixed the bug  

8.  I then ran the commands that were provided in the spec:
    $ tmp=$(mktemp -d)
    $ cd $tmp
    $ touch -d '1918-11-11 11:00 GMT' wwi-armistice
    $ touch now
    $ sleep 1
    $ touch now1
   
9.  After creating this temp directory and three files using touch, I then test
    the ls command in the coreutils-with-bug directory using the command:
    ~/cs35l/lab4/coreutils-with-bug/src/ls -lt --full-time wwi-armistice now now1

    This outputs:
    -rw-r--r-- 1 sheldon csugrad 0 1918-11-11 03:00:00.000000000 -0800 wwi-armistice
    -rw-r--r-- 1 sheldon csugrad 0 2017-10-27 17:36:44.942530115 -0700 now1
    -rw-r--r-- 1 sheldon csugrad 0 2017-10-27 17:36:37.268403273 -0700 now

    We see that the bug exists. ls is displaying from past to future instead of
    the other way. the wwi-armistice file should display third instead of first

10. To figure out what and where the bug is, we have to use gdb to step through
    the code. We use the command:
    gdb ~/cs35l/lab4/coreutils-with-bug/src/ls
    
    This initializes gdb on the ls function

11. I then input the command:
    (gdb) info functions

    This displays all the functions that are defined in ls.c, and knowing that
    our program has a problem with comparing time values and ordering them
    incorrectly, we look at the functions to see if any of those match what we
    are looking for in our bug. I saw that there were three functions that
    seemed closely related: compare_atime, compare_ctime, and compare_mtime

12. I then set breakpoints at these three functions using the commands:
    (gdb) break compare_atime
    (gdb) break compare_ctime
    (gdb) break compare_mtime

    This sets breakpoints at each of thse functions

13. I then run the ls -lt command in gdb using the command:
    (gdb) r -lt

    This begins running the program and we hit our first breakpoint at
    compare_mtime

14. When we step into the function using (gdb) si, and advance through, we see
    that compare_mtime calls another function called timespec_cmp in the
    timespec.h file. The output is:
    
    timespec_cmp (b=..., a=...) at ../lib/timespec.h:49
        return diff ? diff : a.tv_nsec - b.tv_nsec;

    Stepping through more, we see that timespec_cmp has the form:
    timespec_cmp (struct timespec a, struct timespec b)
    {
      int diff = a.tv_sec - b.tv_sec;
      return diff ? diff : a.tv_nsec - b.tv_nsec;
    }

    The suspicious aspect of this function is the line of code:
    int diff = a.tv_sec - b.tv_sec;

    We see that since we are subtracting integers, if a.tv_sec is small enough,
    it is possible that there will be integer overflow, and the answer will wrap
    around.
    To fix this problem, instead of using subtraction to compare, we can just
    use if conditions and return -1, 0, or 1.

15. Now, we have to create a patch file. We exit gdb and navigate to the
    location of timespec.h in coreutils-with-bug using the command:
    cd ~/cs35l/lab4/coreutils-with-bug/lib

16. I then copied the timespec.h file to a new file called tempTime.h using the
    command:
    cp timespec.h tempTime.h		 

    I then edit tempTime.h using emacs and changed timespec_cmp to use if
    conditions. Our new timespec_cmp function is:

    timespec_cmp (struct timespec a, struct timespec b)
    {
	if (a.tv_sec < b.tv_sec) return -1;

	else if (a.tv_sec > b.tv_sec) return 1;

	return 0;
    }

17. I then create a diff file using the diff -u command and store the output
    into lab4.diff:
    diff -u timespec.h tempTime.h > lab4.diff

18. I then created a changeLog in emacs using the command:
    C-x 4 a
    
    I then provided a description of what I did to my program to fix it. I then
    copied and pasted the description into my diff file

19. I then patched timespec.h using while in the lib directory using the
    command:
    patch -p0 < lab5.diff
    
    This outputs:
    patching file lib/timespec.h

    Which indicates that timespec.h has been patched.

20. I exit out of the lib directory using cd .. and then I run make again to
    remake the directory. I then tested out ls again by running the same
    commands that were given before.
    
    $ tmp=$(mktemp -d)
    $ cd $tmp
    $ touch -d '1918-11-11 11:00 GMT' wwi-armistice
    $ touch now
    $ sleep 1
    $ touch now1
    $ TZ=UTC0 ls -lt --full-time wwi-armistice now now1

    This outputs:
    -rw-r--r-- 1 sheldon csugrad 0 2017-10-28 01:41:54.753185870 +0000 now1
    -rw-r--r-- 1 sheldon csugrad 0 2017-10-28 01:41:49.142093054 +0000 now
    -rw-r--r-- 1 sheldon csugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice
    
    We see that this is now in the correct order, with wwi-armistice coming last
    instead of first

21. We then navigate to our home directory using:
    cd ~

22. We then create three files using the commands:
    $ touch now
    $ touch now1
    $ touch -d '1918-11-11 11:00 GMT' wwi-armistice
    $  TZ=UTC0 ls -lt --full-time wwi-armistice now now1

    This outputs:
    -rw-r--r-- 1 sheldon csugrad 0 2054-12-17 17:28:16.000000000 +0000 wwi-armistice
    -rw-r--r-- 1 sheldon csugrad 0 2017-10-28 01:46:13.936937000 +0000 now1
    -rw-r--r-- 1 sheldon csugrad 0 2017-10-28 01:46:12.260782000 +0000 now

    We now see that the date for wwi-armistice is wrong now, with it being in
    the year 2054 instead of 1918. This is because the SEASnet server's touch
    command can't create a date before 1970. This is because the SEASnet NFS
    filesystem uses unsigned 32-bit time stamps, while the linux system uses
    signed 32 bit time stamps, with the signed bit indicating past or
    future. Since the NFS filesystem doesn't read the sign bit as past or
    future, the local file system autmoatically returns a future time stamp, in
    this case being 2054. To avoid this problem, we have to touch the file on
    the local file system.
